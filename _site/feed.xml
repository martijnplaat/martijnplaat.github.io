<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">MT van der Plaat</title>
<subtitle type="text">Tech - Sports - Music</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-07-28T22:27:48+02:00</updated>
<id>/</id>
<author>
  <name>Martijn van der Plaat</name>
  <uri>/</uri>
  <email>mtvanderplaat@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[My current JavaScript development stack]]></title>
  <link rel="alternate" type="text/html" href="/articles/my-current-javascript-development-stack" />
  <id>/articles/my-current-javascript-development-stack</id>
  <published>2015-07-28T00:00:00+02:00</published>
  <updated>2015-07-28T00:00:00+02:00</updated>
  <author>
    <name>Martijn van der Plaat</name>
    <uri></uri>
    <email>mtvanderplaat@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;Recently, I had to make an assessment for a dutch IT company. Therefore, I made a greenfield Angular-based web-application with all kind of new tools and technologies to build Javascript applications of the future.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ECMAScript 6 to prepare myself for the upcoming Angular v2 framework&lt;/li&gt;
  &lt;li&gt;BabelJS for transpiling ES6 code into ES5 code&lt;/li&gt;
  &lt;li&gt;Browserify to bundle all code into one Javascript file&lt;/li&gt;
  &lt;li&gt;Gulp to automatically syntax check-, transpile-, bundle-, and uglify the code&lt;/li&gt;
  &lt;li&gt;Bower to manage my static libraries&lt;/li&gt;
  &lt;li&gt;NPM package manager to install all kind of packages used in the Gulp task manager&lt;/li&gt;
  &lt;li&gt;Angular Material for a slick UI&lt;/li&gt;
  &lt;li&gt;Karma and Jasmine for testing the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for this little application can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/martijnplaat/googlemapapp.git&quot;&gt;github.com/martijnplaat/Googlemapapp.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the particular assessment they gave me an API without Cross-Origin Resource Sharing or any form of API authentication. 
You can test if an API has CORS enabled with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
curl -H &quot;Origin: http://www.example.com&quot;   -H &quot;Access-Control-Request-Method: GET&quot;   -H &quot;Access-Control-Request-Headers: X-Requested-With&quot;   -X OPTIONS --verbose http://still-atoll-8938.herokuapp.com/api/locations/streets?q=d&amp;amp;max=20
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see Access-Control-Allow-Origin: * then we know the API supports CORS:&lt;/p&gt;

&lt;p&gt;HTTP/1.1 200 OK&lt;br /&gt;
&amp;lt; Access-Control-Allow-Origin: *&lt;br /&gt;
&amp;lt; Access-Control-Allow-Methods: GET, POST&lt;br /&gt;
&amp;lt; Access-Control-Allow-Headers: Content-Type&lt;br /&gt;
&amp;lt; Access-Control-Max-Age: 86400&lt;br /&gt;
&amp;lt; Allow: GET, HEAD, POST, TRACE, OPTIONS&lt;br /&gt;
&amp;lt; Date: Wed, 22 Jul 2015 15:53:12 GMT&lt;br /&gt;
&amp;lt; Content-Type: text/html&lt;br /&gt;
* Server Google Frontend is not blacklisted&lt;br /&gt;
&amp;lt; Server: Google Frontend&lt;br /&gt;
&amp;lt; Content-Length: 0&lt;br /&gt;
&amp;lt; Alternate-Protocol: 80:quic,p=0&lt;/p&gt;

&lt;p&gt;In the end this crappy API was actually part of the assessment. However, I came with a quick-and-dirty solution to temporarily overcome the CORS shortcoming; simply disable web-security in the Chrome browser:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
open -a Google\ Chrome --args --disable-web-security
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Below you can find the presentation I gave to present my web-application:&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/martijnvanderplaat-1/deck/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/my-current-javascript-development-stack&quot;&gt;My current JavaScript development stack&lt;/a&gt; was originally published by Martijn van der Plaat at &lt;a href=&quot;&quot;&gt;MT van der Plaat&lt;/a&gt; on July 28, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Rule of the least power]]></title>
  <link rel="alternate" type="text/html" href="/articles/rule-of-the-least-power" />
  <id>/articles/rule-of-the-least-power</id>
  <published>2015-07-03T00:00:00+02:00</published>
  <updated>2015-07-03T00:00:00+02:00</updated>
  <author>
    <name>Martijn van der Plaat</name>
    <uri></uri>
    <email>mtvanderplaat@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;@angular_nu: “Not sure WebAssembly http://ow.ly/OwDNW  is going to make it as it violates Atwood’s law: http://ow.ly/OwDXx . #webassemby #javascript”&lt;/p&gt;

&lt;p&gt;When I read this tweet recently I had an epiphany..&lt;/p&gt;

&lt;p&gt;Since I have my background in semantic web technologies I have to say that we can only leverage the power of the web when data is freely available for everyone and even more; computers should be able to interpret the meaning of this data. The web, as we notice today, holds data which is freely available but, the semantics of the data is still locked up in our back-end databases. This lack of semantics on the web is not the point I want to make and is still a shortcoming of the web we hopefully overcome somewhere in the near future.&lt;/p&gt;

&lt;p&gt;But, what we have accomplished, is a web of connected documents with open -freely available- data which could be indexed and analysed by search engines and advanced web applications. In my opinion there are two trends that threatens this powerful foundation.&lt;/p&gt;

&lt;p&gt;The first threat is hidden in Atwood’s Law;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&quot;Any application that can be written in Javascript, will eventually be written in Javascript&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Should we Javascript all things?&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://www.quickmeme.com/img/8d/8d30a19413145512ad5a05c46ec0da545df5ed79e113fcf076dc03c7514eb631.jpg&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;No not really. Remember when building web applications; “Declaritive First”. This is really important because with a declaritive language the data can be used far beyond an individual implementation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
&quot;An imperative-only JavaScript web is enticing if we understand the web as open technologies and connected documents. But if we expand our understanding of the web to include connected systems, then declarative programming is a key part of how we connect those systems.&quot;
&lt;/code&gt; – &lt;a href=&quot;http://www.smashingmagazine.com/2014/07/30/declarative-programming/&quot;&gt;Declarative Programming And The Web by Scot Reynen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second threat is actually what the mentioned tweet is all about. What we try to accomplish with WebAssembly is an invitation on the web of really powerful imperative languages like C, C++, etc.&lt;/p&gt;

&lt;p&gt;Now what the &lt;a href=&quot;http://www.w3.org/2001/tag/doc/leastPower.html&quot;&gt;Rule Of The Least Power&lt;/a&gt; actually says is that when you choose a language to process your data, especially when this data is published on the web, you should start with a language with the least power. Because the least powerful languages intrinsically facilitate the data in their language to web developers on the World Wide Web. Ie. we should advocate open data on the web, and therefore be aware of locking up the data in our programming languages!&lt;/p&gt;

&lt;p&gt;Respectively from least powerful to powerful we distinguish the following type of languages: descriptive languages (XML, HTML, RDF), limited propositional logic (access control lists, regular expressions) , declarative languages (JSON, SQL, XST, OWL), functional languages (Haskell, Javascript) and finally imperative and turing-complete languages (Java, C, JavaScript).&lt;/p&gt;

&lt;p&gt;Thus, I do not say that we should not use Javascript and WebAssembly but, when building a website/webapplication you should use a layered model and start with exposing your data in a descriptive language up to maybe even the use of C++ within a WebAssembly implementation :)&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;/articles/rule-of-the-least-power&quot;&gt;Rule of the least power&lt;/a&gt; was originally published by Martijn van der Plaat at &lt;a href=&quot;&quot;&gt;MT van der Plaat&lt;/a&gt; on July 03, 2015.&lt;/p&gt;</content>
</entry>

</feed>